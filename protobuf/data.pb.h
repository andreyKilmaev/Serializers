// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_data_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_data_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_data_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_data_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_data_2eproto;
namespace Serialize {
class Data;
class DataDefaultTypeInternal;
extern DataDefaultTypeInternal _Data_default_instance_;
class Map;
class MapDefaultTypeInternal;
extern MapDefaultTypeInternal _Map_default_instance_;
}  // namespace Serialize
PROTOBUF_NAMESPACE_OPEN
template<> ::Serialize::Data* Arena::CreateMaybeMessage<::Serialize::Data>(Arena*);
template<> ::Serialize::Map* Arena::CreateMaybeMessage<::Serialize::Map>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Serialize {

// ===================================================================

class Map :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Serialize.Map) */ {
 public:
  Map();
  virtual ~Map();

  Map(const Map& from);
  Map(Map&& from) noexcept
    : Map() {
    *this = ::std::move(from);
  }

  inline Map& operator=(const Map& from) {
    CopyFrom(from);
    return *this;
  }
  inline Map& operator=(Map&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Map& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Map* internal_default_instance() {
    return reinterpret_cast<const Map*>(
               &_Map_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Map& a, Map& b) {
    a.Swap(&b);
  }
  inline void Swap(Map* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Map* New() const final {
    return CreateMaybeMessage<Map>(nullptr);
  }

  Map* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Map>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Map& from);
  void MergeFrom(const Map& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Map* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Serialize.Map";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_data_2eproto);
    return ::descriptor_table_data_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIFieldNumber = 2,
    kSFieldNumber = 1,
  };
  // repeated int32 i = 2;
  int i_size() const;
  private:
  int _internal_i_size() const;
  public:
  void clear_i();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_i(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_i() const;
  void _internal_add_i(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_i();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 i(int index) const;
  void set_i(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_i(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      i() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_i();

  // string s = 1;
  void clear_s();
  const std::string& s() const;
  void set_s(const std::string& value);
  void set_s(std::string&& value);
  void set_s(const char* value);
  void set_s(const char* value, size_t size);
  std::string* mutable_s();
  std::string* release_s();
  void set_allocated_s(std::string* s);
  private:
  const std::string& _internal_s() const;
  void _internal_set_s(const std::string& value);
  std::string* _internal_mutable_s();
  public:

  // @@protoc_insertion_point(class_scope:Serialize.Map)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > i_;
  mutable std::atomic<int> _i_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr s_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class Data :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Serialize.Data) */ {
 public:
  Data();
  virtual ~Data();

  Data(const Data& from);
  Data(Data&& from) noexcept
    : Data() {
    *this = ::std::move(from);
  }

  inline Data& operator=(const Data& from) {
    CopyFrom(from);
    return *this;
  }
  inline Data& operator=(Data&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Data& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Data* internal_default_instance() {
    return reinterpret_cast<const Data*>(
               &_Data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Data& a, Data& b) {
    a.Swap(&b);
  }
  inline void Swap(Data* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Data* New() const final {
    return CreateMaybeMessage<Data>(nullptr);
  }

  Data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Data>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Data& from);
  void MergeFrom(const Data& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Data* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Serialize.Data";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_data_2eproto);
    return ::descriptor_table_data_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMpFieldNumber = 3,
    kStrFieldNumber = 1,
    kFFieldNumber = 2,
  };
  // repeated .Serialize.Map mp = 3;
  int mp_size() const;
  private:
  int _internal_mp_size() const;
  public:
  void clear_mp();
  ::Serialize::Map* mutable_mp(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialize::Map >*
      mutable_mp();
  private:
  const ::Serialize::Map& _internal_mp(int index) const;
  ::Serialize::Map* _internal_add_mp();
  public:
  const ::Serialize::Map& mp(int index) const;
  ::Serialize::Map* add_mp();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialize::Map >&
      mp() const;

  // string str = 1;
  void clear_str();
  const std::string& str() const;
  void set_str(const std::string& value);
  void set_str(std::string&& value);
  void set_str(const char* value);
  void set_str(const char* value, size_t size);
  std::string* mutable_str();
  std::string* release_str();
  void set_allocated_str(std::string* str);
  private:
  const std::string& _internal_str() const;
  void _internal_set_str(const std::string& value);
  std::string* _internal_mutable_str();
  public:

  // float f = 2;
  void clear_f();
  float f() const;
  void set_f(float value);
  private:
  float _internal_f() const;
  void _internal_set_f(float value);
  public:

  // @@protoc_insertion_point(class_scope:Serialize.Data)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialize::Map > mp_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str_;
  float f_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Map

// string s = 1;
inline void Map::clear_s() {
  s_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Map::s() const {
  // @@protoc_insertion_point(field_get:Serialize.Map.s)
  return _internal_s();
}
inline void Map::set_s(const std::string& value) {
  _internal_set_s(value);
  // @@protoc_insertion_point(field_set:Serialize.Map.s)
}
inline std::string* Map::mutable_s() {
  // @@protoc_insertion_point(field_mutable:Serialize.Map.s)
  return _internal_mutable_s();
}
inline const std::string& Map::_internal_s() const {
  return s_.GetNoArena();
}
inline void Map::_internal_set_s(const std::string& value) {
  
  s_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Map::set_s(std::string&& value) {
  
  s_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Serialize.Map.s)
}
inline void Map::set_s(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  s_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Serialize.Map.s)
}
inline void Map::set_s(const char* value, size_t size) {
  
  s_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Serialize.Map.s)
}
inline std::string* Map::_internal_mutable_s() {
  
  return s_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Map::release_s() {
  // @@protoc_insertion_point(field_release:Serialize.Map.s)
  
  return s_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Map::set_allocated_s(std::string* s) {
  if (s != nullptr) {
    
  } else {
    
  }
  s_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), s);
  // @@protoc_insertion_point(field_set_allocated:Serialize.Map.s)
}

// repeated int32 i = 2;
inline int Map::_internal_i_size() const {
  return i_.size();
}
inline int Map::i_size() const {
  return _internal_i_size();
}
inline void Map::clear_i() {
  i_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Map::_internal_i(int index) const {
  return i_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Map::i(int index) const {
  // @@protoc_insertion_point(field_get:Serialize.Map.i)
  return _internal_i(index);
}
inline void Map::set_i(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  i_.Set(index, value);
  // @@protoc_insertion_point(field_set:Serialize.Map.i)
}
inline void Map::_internal_add_i(::PROTOBUF_NAMESPACE_ID::int32 value) {
  i_.Add(value);
}
inline void Map::add_i(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_i(value);
  // @@protoc_insertion_point(field_add:Serialize.Map.i)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Map::_internal_i() const {
  return i_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Map::i() const {
  // @@protoc_insertion_point(field_list:Serialize.Map.i)
  return _internal_i();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Map::_internal_mutable_i() {
  return &i_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Map::mutable_i() {
  // @@protoc_insertion_point(field_mutable_list:Serialize.Map.i)
  return _internal_mutable_i();
}

// -------------------------------------------------------------------

// Data

// string str = 1;
inline void Data::clear_str() {
  str_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Data::str() const {
  // @@protoc_insertion_point(field_get:Serialize.Data.str)
  return _internal_str();
}
inline void Data::set_str(const std::string& value) {
  _internal_set_str(value);
  // @@protoc_insertion_point(field_set:Serialize.Data.str)
}
inline std::string* Data::mutable_str() {
  // @@protoc_insertion_point(field_mutable:Serialize.Data.str)
  return _internal_mutable_str();
}
inline const std::string& Data::_internal_str() const {
  return str_.GetNoArena();
}
inline void Data::_internal_set_str(const std::string& value) {
  
  str_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Data::set_str(std::string&& value) {
  
  str_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Serialize.Data.str)
}
inline void Data::set_str(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  str_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Serialize.Data.str)
}
inline void Data::set_str(const char* value, size_t size) {
  
  str_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Serialize.Data.str)
}
inline std::string* Data::_internal_mutable_str() {
  
  return str_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Data::release_str() {
  // @@protoc_insertion_point(field_release:Serialize.Data.str)
  
  return str_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Data::set_allocated_str(std::string* str) {
  if (str != nullptr) {
    
  } else {
    
  }
  str_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), str);
  // @@protoc_insertion_point(field_set_allocated:Serialize.Data.str)
}

// float f = 2;
inline void Data::clear_f() {
  f_ = 0;
}
inline float Data::_internal_f() const {
  return f_;
}
inline float Data::f() const {
  // @@protoc_insertion_point(field_get:Serialize.Data.f)
  return _internal_f();
}
inline void Data::_internal_set_f(float value) {
  
  f_ = value;
}
inline void Data::set_f(float value) {
  _internal_set_f(value);
  // @@protoc_insertion_point(field_set:Serialize.Data.f)
}

// repeated .Serialize.Map mp = 3;
inline int Data::_internal_mp_size() const {
  return mp_.size();
}
inline int Data::mp_size() const {
  return _internal_mp_size();
}
inline void Data::clear_mp() {
  mp_.Clear();
}
inline ::Serialize::Map* Data::mutable_mp(int index) {
  // @@protoc_insertion_point(field_mutable:Serialize.Data.mp)
  return mp_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialize::Map >*
Data::mutable_mp() {
  // @@protoc_insertion_point(field_mutable_list:Serialize.Data.mp)
  return &mp_;
}
inline const ::Serialize::Map& Data::_internal_mp(int index) const {
  return mp_.Get(index);
}
inline const ::Serialize::Map& Data::mp(int index) const {
  // @@protoc_insertion_point(field_get:Serialize.Data.mp)
  return _internal_mp(index);
}
inline ::Serialize::Map* Data::_internal_add_mp() {
  return mp_.Add();
}
inline ::Serialize::Map* Data::add_mp() {
  // @@protoc_insertion_point(field_add:Serialize.Data.mp)
  return _internal_add_mp();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialize::Map >&
Data::mp() const {
  // @@protoc_insertion_point(field_list:Serialize.Data.mp)
  return mp_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Serialize

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_data_2eproto
